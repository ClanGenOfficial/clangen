name: PyInstaller build

on: [push]


env:
  VERSION_NAME: ${{ github.sha }}
  RELEASE_CHANNEL: development
  IS_RELEASE: 0


jobs:

  build-self-updater:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: selfupdater-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: selfupdater-
      - name: Build self-updater
        shell: bash
        run: |
          cd self_updater
          cargo build --release
      
      - name: Upload self-updater
        uses: actions/upload-artifact@v3
        with:
          name: self_updater
          path: self_updater/target/release/self_updater.exe
      

      - name: Configure Release
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          echo "VERSION_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=stable" >> $GITHUB_ENV
          echo "IS_RELEASE=1" >> $GITHUB_ENV
  build:
    needs:
      - build-self-updater
    strategy:
      matrix:
        os: [ ubuntu-20.04, ubuntu-22.04, windows-2019, windows-latest, macos-latest ]
        include:
          - os: ubuntu-20.04
            artifact_name: Clangen_Linux64_glibc2.31+.tar.xz
            api_id: linux2.31
            butler_id: linux64_glibc_231
          - os: ubuntu-22.04
            artifact_name: Clangen_Linux64_glibc2.35+.tar.xz
            api_id: linux2.35
            butler_id: linux64_glibc_235
          - os: windows-2019
            artifact_name: Clangen_Win32.zip
            api_id: win32
            butler_id: win32
          - os: windows-latest
            artifact_name: Clangen_Win64_Windows10+.zip
            api_id: win10+
            butler_id: win64_10
          - os: macos-latest
            artifact_name: Clangen_macOS64.dmg.zip
            api_id: macOS
            butler_id: osx64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 20
      - name: Set up Python
        if: ${{!contains(fromJson('["macos-latest", "windows-2019"]'), matrix.os)}}
        uses: actions/setup-python@v3
        with:
          python-version: 3.11
          architecture: 'x64'
      - name: Set up 32b Python
        if: matrix.os == 'windows-2019'
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
          architecture: 'x86'
      - name: Set up Python
        if: matrix.os == 'macos-latest'
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.11"
      - name: Install poetry
        if: matrix.os != 'macos-latest'
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Install dependencies
        if: matrix.os != 'macos-latest'
        run: |
          poetry install --with build -E discord
      - name: Install dependencies
        if: matrix.os == 'macos-latest'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade setuptools wheel Pillow PyInstaller
          python3 -m pip install -r requirements.txt
          npm install -g appdmg
      
      - name: Write version
        shell: bash
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ env.VERSION_NAME }}" >> version.ini
          echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini
          echo "upstream=${{ github.repository }}" >> version.ini
        
      - name: Write commit file
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        shell: bash
        run: |
          git log --pretty=oneline -15 --no-decorate  --no-merges > changelog.txt
      
      - name: Download self updater
        if: startsWith(matrix.os, 'windows')
        uses: actions/download-artifact@v3
        with:
          name: self_updater
          path: resources/self_updater.exe

      - name: Run pyinstaller
        if: startsWith(matrix.os, 'windows')
        run: poetry run PyInstaller Clangen.spec
        env:
          IS_RELEASE: ${{env.IS_RELEASE}}
      - name: Run pyinstaller
        if: startsWith(matrix.os, 'ubuntu')
        run: poetry run python3 -m PyInstaller Clangen.spec
        env:
          IS_RELEASE: ${{env.IS_RELEASE}}
      - name: Run pyinstaller
        if: matrix.os == 'macos-latest'
        run: python3 -m PyInstaller Clangen.spec
        env:
          IS_RELEASE: ${{env.IS_RELEASE}}

      
      - name: Build macos app
        if: matrix.os == 'macos-latest'
        # tbh idk why were removing dist/Clangen
        run: |
          rm -r dist/Clangen
          appdmg appdmg.json Clangen_macOS64.dmg
          zip ${{matrix.artifact_name}} Clangen_macOS64.dmg
      
      - name: Create windows zip
        if: startsWith(matrix.os, 'windows')
        run: |
          cp dist/Clangen/.itch.toml dist/
          tar.exe -a -c -f ${{matrix.artifact_name}} -C dist Clangen .itch.toml
      
      - name: Create linux tar
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          tar -caf ${{matrix.artifact_name}} -C dist Clangen
      
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.artifact_name}}
          path: ${{matrix.artifact_name}}
      

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        if: github.repository == 'Thlumyn/clangen'
        with:
          gpg_private_key: ${{ secrets.PACKAGESIGNKEY}}
          passphrase: ${{secrets.PACKAGESIGNKEYPASSPHRASE}}

      - name: Upload to API
        if: github.repository == 'Thlumyn/clangen'
        run: |
          gpg --output ${{matrix.artifact_name}}.sig --detatch-sig -a ${{matrix.artifact_name}}


          curl -X 'POST' \
            'https://clangen.io/api/v1/Update/Channels/${{ env.RELEASE_CHANNEL }}/Releases/${{ env.VERSION_NAME }}/Appoint' \
            -H 'X-API-Key: ${{ secrets.UPDATE_API_DEPLOY_KEY }}' \
            -H 'accept: */*'
          curl -X 'PUT' \
            'https://clangen.io/api/v1/Update/Channels/${{ env.RELEASE_CHANNEL }}/Releases/${{ env.VERSION_NAME }}/Artifacts/${{matrix.api_id}}' \
            -H 'X-API-Key: ${{ secrets.UPDATE_API_DEPLOY_KEY }}' \
            -H 'accept: */*' \
            -H 'Content-Type: multipart/form-data' \
            -F 'fileBundle=@${{matrix.artifact_name}}' \
            -F 'fileBundle=@${{matrix.artifact_name}}.sig' \
            --http1.1
        
      - name: Set up butler
        if: startsWith(github.ref, 'refs/tags/')
        uses: jdno/setup-butler@v1
      - name: Upload to itch.io
        if: startsWith(github.ref, 'refs/tags/')
        env:
          BUTLER_API_KEY: ${{secrets.BUTLER_API_KEY}}
        run: butler push ${{matrix.artifact_name}} sablesteel/clan-gen-fan-edit:${{matrix.butler_id}} --userversion "${{env.VERSION_NAME}}"
      
      - name: Github release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{matrix.artifact_name}}

    
  confirm_release:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.repository == 'Thlumyn/clangen'
    steps:
      - name: Confirm Release
        run: |
          curl -X 'POST' \
            'https://clangen.io/api/v1/Update/Channels/${{ env.RELEASE_CHANNEL }}/Releases/${{ env.VERSION_NAME }}/Confirm' \
            -H 'X-API-Key: ${{ secrets.UPDATE_API_DEPLOY_KEY }}' \
            -H 'accept: */*'

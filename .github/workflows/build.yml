name: Pyinstaller Build

on: [push, workflow_dispatch]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, macos-latest, windows-latest, windows-2019]
        bits: [32b, 64b]
        exclude:
          - bits: 32b
        include:
          - os: windows-2019
            bits: 32b
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_FILE_EXTENSION: ''
      FILE_EXTENSION: ''
      OS_STRING: ''
      API_STRING: ''
      BUTLER_STR: ''
      VERSION_NUMBER: ''
      RELEASE_CHANNEL: ''
      IS_RELEASE: ''
      BITNESS: ''
    steps:
      - name: Setup env ubuntu-20.04
        if: matrix.os == 'ubuntu-20.04'
        shell: bash
        run: |
          echo "OS_STRING=Linux64_glibc2.31+" >> "$GITHUB_ENV"
          echo "API_STRING=linux2.31" >> "$GITHUB_ENV"
          echo "BUTLER_STR=linux64_glibc_231" >> "$GITHUB_ENV"
      - name: Setup env ubuntu-22.04
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          echo "OS_STRING=Linux64_glibc2.35+" >> "$GITHUB_ENV"
          echo "API_STRING=linux2.35" >> "$GITHUB_ENV"
          echo "BUTLER_STR=linux64_glibc_235" >> "$GITHUB_ENV"
      - name: Setup env windows-latest
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo "OS_STRING=Win64_Windows10+" >> "$GITHUB_ENV"
          echo "API_STRING=win10+" >> "$GITHUB_ENV"
          echo "BUTLER_STR=win64_10" >> "$GITHUB_ENV"
      - name: Setup env windows-2019 32b
        if: matrix.os == 'windows-2019' && matrix.bits == '32b'
        shell: bash
        run: |
          echo "OS_STRING=Win32" >> "$GITHUB_ENV"
          echo "API_STRING=win32" >> "$GITHUB_ENV"
          echo "BUTLER_STR=win32" >> "$GITHUB_ENV"
          echo "BITNESS=x86" >> "$GITHUB_ENV"
      - name: Setup env windows-2019 64b
        if: matrix.os == 'windows-2019' && matrix.bits == '64b'
        shell: bash
        run: |
          echo "OS_STRING=Win64" >> "$GITHUB_ENV"
          echo "API_STRING=win64" >> "$GITHUB_ENV"
          echo "BUTLER_STR=win64" >> "$GITHUB_ENV"
          echo "BITNESS=x64" >> "$GITHUB_ENV"
      - name: Setup env macos-latest
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "OS_STRING=macOS64" >> "$GITHUB_ENV"
          echo "API_STRING=macOS" >> "$GITHUB_ENV"
          echo "BUTLER_STR=osx64" >> "$GITHUB_ENV"
      - uses: actions/checkout@v3
      - name: Install poetry
        if: matrix.os != 'macos-latest'
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Install python
        if: matrix.os != 'macos-latest' && matrix.os != 'windows-2019'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: x64
          cache: poetry
      - name: Install python
        if: matrix.os == 'windows-2019'
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          architecture: ${{ env.BITNESS }}
          cache: poetry
      - name: Install miniconda
        if: matrix.os == 'macos-latest'
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.11"
      - name: Setup cargo cache
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Install Dependencies
        if: matrix.os == 'macos-latest'
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          python -m pip install -r requirements.txt
          python -m pip install --upgrade Pillow PyInstaller
          npm i -g appdmg
      - name: Install Dependencies
        if: matrix.os != 'macos-latest'
        run: |
          git clone https://github.com/clangen-devs/pyinstaller
          poetry install --with build -E discord
      - name: Write version file for dev
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        shell: bash
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ github.sha }}" >> version.ini
          echo "VERSION_NUMBER=${{ github.sha }}" >> "$GITHUB_ENV"
          echo "release_channel=development" >> version.ini
          echo "RELEASE_CHANNEL=development" >> "$GITHUB_ENV"
          echo "upstream=${{ github.repository }}" >> version.ini
      - name: Write version file for release
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ github.ref_name }}" >> version.ini
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> "$GITHUB_ENV"
          echo "release_channel=stable" >> version.ini
          echo "RELEASE_CHANNEL=stable" >> "$GITHUB_ENV"
          echo "upstream=${{ github.repository }}" >> version.ini
      
      - name: Build self-updater
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
        shell: bash
        run: |
          cd self_updater
          cargo build --release
          cp target/release/self_updater.exe ../resources/

      - name: Run Pyinstaller
        if: contains(fromJson('["ubuntu-20.04", "ubuntu-22.04"]'), matrix.os)
        run: poetry run python3 -m PyInstaller Clangen.spec
        env:
          IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}
      - name: Run Pyinstaller for Windows
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
        run: poetry run PyInstaller Clangen.spec
        env:
          IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}
      - name: Run Pyinstaller for macos
        if: matrix.os == 'macos-latest'
        shell: bash -l {0}
        run: python -m PyInstaller Clangen.spec
        env:
          IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}
      

      - name: Create archive (.zip)
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
        shell: bash
        run: |
          cp dist/Clangen/.itch.toml dist/
          tar.exe -a -c -f Clangen_${{ env.OS_STRING }}.zip -C dist Clangen .itch.toml
          echo "FILE_EXTENSION=zip" >> "$GITHUB_ENV"
          echo "GITHUB_FILE_EXTENSION=zip" >> "$GITHUB_ENV"
      - name: Create archive (.tar.xz)
        if: contains(fromJson('["ubuntu-20.04", "ubuntu-22.04"]'), matrix.os)
        shell: bash
        run: |
          tar -caf Clangen_${{ env.OS_STRING }}.tar.xz -C dist Clangen
          echo "FILE_EXTENSION=tar.xz" >> "$GITHUB_ENV"
          echo "GITHUB_FILE_EXTENSION=tar.xz" >> "$GITHUB_ENV"
      - name: Create archive (.dmg)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          rm -r dist/Clangen
          appdmg appdmg.json Clangen_${{ env.OS_STRING }}.dmg
          zip Clangen_${{ env.OS_STRING }}.dmg.zip Clangen_${{ env.OS_STRING }}.dmg
          echo "FILE_EXTENSION=dmg.zip" >> "$GITHUB_ENV"
          echo "GITHUB_FILE_EXTENSION=dmg" >> "$GITHUB_ENV"
      
      - name: Upload Artifact
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: Clangen_${{ env.OS_STRING }}
          path: dist/
      - name: Upload Artifact
        if: matrix.os != 'windows-latest' && matrix.os != 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: Clangen_${{ env.OS_STRING }}.${{ env.GITHUB_FILE_EXTENSION }}
          path: Clangen_${{ env.OS_STRING }}.${{ env.GITHUB_FILE_EXTENSION }}
      
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        if: github.repository == 'Thlumyn/clangen'
        with:
          gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
          passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      
      - name: Sign archive
        if: github.repository == 'Thlumyn/clangen'
        run: gpg --output Clangen_${{ env.OS_STRING }}.${{ env.FILE_EXTENSION }}.sig --detach-sig -a Clangen_${{ env.OS_STRING }}.${{ env.FILE_EXTENSION }}
      
      - name: Upload artifact to API
        if: github.repository == 'Thlumyn/clangen'
        run: |
          curl -X 'POST' \
            'https://clangen.archanyhm.dev/api/v1/Update/Channels/${{ env.RELEASE_CHANNEL }}/Releases/${{ env.VERSION_NUMBER }}/Appoint' \
            -H 'X-API-Key: ${{ secrets.UPDATE_API_DEPLOY_KEY }}' \
            -H 'accept: */*'
          curl -X 'PUT' \
            'https://clangen.archanyhm.dev/api/v1/Update/Channels/${{ env.RELEASE_CHANNEL }}/Releases/${{ env.VERSION_NUMBER }}/Artifacts/${{ env.API_STRING }}' \
            -H 'X-API-Key: ${{ secrets.UPDATE_API_DEPLOY_KEY }}' \
            -H 'accept: */*' \
            -H 'Content-Type: multipart/form-data' \
            -F 'fileBundle=@Clangen_${{ env.OS_STRING }}.${{ env.FILE_EXTENSION }};type=application/zip' \
            -F 'fileBundle=@Clangen_${{ env.OS_STRING}}.${{ env.FILE_EXTENSION }}.sig' \
            --http1.1
      
      - name: Setup butler
        if: startsWith(github.ref, 'refs/tags/') && github.repository == 'Thlumyn/clangen' && env.BUTLER_API_KEY != ''
        uses: jdno/setup-butler@v1
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      - name: Upload to itch.io
        if: startsWith(github.ref, 'refs/tags/') && github.repository == 'Thlumyn/clangen' && env.BUTLER_API_KEY != ''
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        run: butler push Clangen_${{ env.OS_STRING }}.${{ env.GITHUB_FILE_EXTENSION }} sablesteel/clan-gen-fan-edit:${{ env.BUTLER_STR }} --userversion "${{ env.VERSION_NUMBER }}"
      
      - name: Upload to GitHub
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: Clangen_${{ env.OS_STRING }}.${{ env.GITHUB_FILE_EXTENSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      
      - name: Reset working tree
        run: git reset --hard



  confirm_release:
    runs-on: ubuntu-22.04
    needs:
      - build
    env:
      VERSION_NUMBER: ''
      RELEASE_CHANNEL: ''
    steps:
      - name: Configure dev
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> "$GITHUB_ENV"
          echo "RELEASE_CHANNEL=development" >> "$GITHUB_ENV"
      - name: Configure release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> "$GITHUB_ENV"
          echo "RELEASE_CHANNEL=stable" >> "$GITHUB_ENV"
      - name: Confirm release
        run: |
          curl -X 'POST' \
            'https://clangen.archanyhm.dev/api/v1/Update/Channels/${{ env.RELEASE_CHANNEL }}/Releases/${{ env.VERSION_NUMBER }}/Confirm' \
            -H 'X-API-Key: ${{ secrets.UPDATE_API_DEPLOY_KEY }}' \
            -H 'accept: */*'
